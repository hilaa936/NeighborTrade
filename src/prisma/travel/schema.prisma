// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TRAVEL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/travel"
}

// //enums
// enum TripTypes {
//   SOLO

// }
// enum TripStatus {
//   PLANNING
//   DONE
// }


model UserTrip {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255) // Required - e.g., "Honeymoon with my love"
  userId         String       // Required - Foreign key to link with User model
  userPreferences Json?    // Optional JSON object for preferences like interest, budget level, etc.
  tripStartDate  DateTime? // Optional start date of the trip
  tripEndDate    DateTime? // Optional end date of the trip  tripType       String?   @db.VarChar(50) // Optional trip type: solo, couple, friends, family, etc.
  tripType       String?   @db.VarChar(50) // Optional trip type (e.g., solo, couple, family)
  destination    String?   @db.VarChar(100) // Optional destination
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// TravelDB Schema

model Activity {
  id          Int          @id @default(autoincrement())
  name        String       // Name of the activity
  description String?      // Optional description of the activity
  location    String       // Location of the activity
  category    String?      // Optional category of the activity
  tags        String[]     // Array of tags associated with the activity
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userActivities UserActivity[] // A list of user activities associated with this activity

  @@map("activities")
}

model UserActivity {
  id          Int          @id @default(autoincrement())
  userId      String       // Foreign key to the user (string type)
  activityId  Int          // Foreign key to the activity

  // Additional fields to capture user-specific details about the activity
  status      String?      // e.g., "Interested", "Going", "Not Going"
  notes       String?      // Optional notes from the user about the activity
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  activity    Activity     @relation(fields: [activityId], references: [id])
  
  @@unique([userId, activityId]) // Composite unique constraint
  @@map("user_activities")
}
