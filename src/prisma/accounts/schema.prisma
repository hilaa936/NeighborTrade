// schema.prisma accounts

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_ACCOUNTS")
}

generator client {
  provider = "prisma-client-js"
  output = "../generated/accounts" 
}

//enums
enum RoleTypes {
  USER
  TRADER
  BUYER
  ADMIN
}

model User {
  id              String    @id @default(uuid())                  // Unique identifier (UUID)
  username        String    @unique                               // Username must be unique
  email           String    @unique                               // Email must be unique
  password        String?                                     
  image           String?
  role            RoleTypes @default(USER)                        // User role for RBAC
  isActive        Boolean   @default(true)                        // Account active by default
  createdAt       DateTime  @default(now())                       // Account creation timestamp
  updatedAt       DateTime  @updatedAt                            // Auto-updated timestamp
  lastLogin       DateTime?                                       // Last login timestamp
  lastLoginIp     String?                                         // Last login IP address
  lastLoginUserAgent String?                                      // Last login user agent
  emailVerified   Boolean?                                        // Email verification status
  provider        String?                                         // OAuth provider
  providerId      String?                                         // OAuth provider ID
  lastActivity    DateTime?                                       // Last activity timestamp
  deletedAt       DateTime?                                        // Soft delete timestamp  
  
  profile         Profile?                                        // One-to-one relation with Profile
  profileId Int?
  
  //market                          
  // produce   Produce[]                                // One-to-many relation with Produce (if user is a trader)
  // proposedTrades Trade[] @relation("proposedTrades") 
  // receivedTrades Trade[] @relation("receivedTrades")
  
  //travel
  // UserActivities UserActivity[]
  // UserTrips UserTrip[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Profile {
  id              String    @id @default(uuid())                  // Unique identifier (UUID)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)  
  userId          String    @unique                               // Foreign key for User
  profilePicture  String?                                         // Profile picture URL or path
  firstName       String?                                         // First name
  lastName        String?                                         // Last name
  bio             String?                                         // Bio or description
  phoneNumber     String?                                         // Phone number
  location        String?                                         // Location
  website         String?                                         // Website URL
  birthdate       DateTime?                                       // Birthdate
  createdAt       DateTime  @default(now())                       // Profile creation timestamp
  updatedAt       DateTime  @updatedAt                            // Auto-updated timestamp

  @@map("profiles")
}
